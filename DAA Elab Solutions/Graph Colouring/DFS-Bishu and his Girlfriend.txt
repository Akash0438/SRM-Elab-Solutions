#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <cassert>
#include<complex>
#include <time.h>
using namespace std;
#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define RFOR(i, b, a) for(int i=(b)-1;i>=(a);--i)
#define FILL(A,value) memset(A,value,sizeof(A))
#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979
#define x0 ikjnrmthklmnt
#define y0 lkrjhkltr
#define y1 ewrgrg
typedef long long int ll;
typedef unsigned long long UInt;
typedef vector<ll> VI;
typedef pair<ll, ll> PII;
typedef complex<double> base;
const int INF = 1000000000;
const int MAX = 100007;
const int MAXE = 5000;
const int MAXV = 20*20;
const int BASE = 1000000007;
const int MOD = 1000000007;
 
VI A[10001];
ll vis[10001];
ll level[10001];
ll Q[10001];
 
void BFS(ll j){
    
    queue <ll> q;
    ll i;
    vis[j]=1;
    level[j]=0;
    q.push(j);
    while(!q.empty()){
        ll p=q.front();
        q.pop();
        FOR(i, 0, A[p].size()){
            if(vis[A[p][i]]==0){
                q.push(A[p][i]);
                level[A[p][i]]=level[p]+1;
                vis[A[p][i]]=1;
            }
        }
    }
}
 
 
int main()
{
    ll i,n,u,v,j,q,min=1000000;
    cin>>n;
    
    FOR(i, 0, n-1)
    {
        cin>>u>>v;
        A[u].PB(v);
        A[v].PB(u);
    }
    cin>>q;
    FOR(i, 0, q)
        cin>>Q[i];
    FOR(i, 0, n)
    {
        vis[i]=0;
        level[i]=0;
    }
    BFS(1);
    for(i=q-1;i>=0;i--)
    {
        if(level[Q[i]]<min){
            min=level[Q[i]];
            j=Q[i];
        }
        if(level[Q[i]]==min)
        {
            if(Q[i]<j)
            j=Q[i];
        }
            
    }
 
    cout<<j;
    return 0;
}