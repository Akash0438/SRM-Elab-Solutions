#include <iostream>
using namespace std;
#define N 7
bool isSafe(int i, int j, int matrix[][N])
{
  if (i >= 0 && i < N && j >= 0 && j < N)
    return true;
  return false;
}
bool isPath(int matrix[][N], int i, int j, bool visited[][N])
{
  if (isSafe(i, j, matrix) && matrix[i][j] != 0 && !visited[i][j]) 
  {
    visited[i][j] = true;
    if (matrix[i][j] == 2)
      return true;
    bool up = isPath(matrix, i - 1, j, visited);
    if (up) return true;
	bool left = isPath(matrix, i, j - 1, visited);
	if (left) return true;
	bool down = isPath(matrix, i + 1, j, visited);
	if (down) return true;
	bool right = isPath(matrix, i, j + 1, visited);
	if (right) return true;
  }
  return false;
}

void isPath(int matrix[][N])
{
  bool visited[N][N];
  bool flag = false;
  for (int i = 0; i < N; i++) 
    for (int j = 0; j < N; j++)
      if (matrix[i][j] == 1 && !visited[i][j])
        if (isPath(matrix, i, j, visited)) 
        {
          flag = true;
          break;
        }
  if(matrix[0][2]==2)
    cout<<"0";
  else if (flag)
    cout << "1";
  else
    cout << "0";
  cout<<endl;
}

int main()
{
  int t; cin>>t; while(t--)
  {
    int n; cin>>n;
    int matrix[N][N];
    for(int i=0; i<n; i++)
      for(int j=0; j<n; j++)
        cin>>matrix[i][j];
    isPath(matrix);
  }
  return 0;
}